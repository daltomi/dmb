// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "uidmb.hpp"
uidmb::uidmb(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _uidmb();
}

uidmb::uidmb(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _uidmb();
}

uidmb::uidmb()
  : Fl_Double_Window(0, 0, 130, 50, "dmb") {
  clear_flag(16);
  _uidmb();
}

void uidmb::_uidmb() {
this->box(FL_FLAT_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ Fl_Button* o = btnPlayPause = new Fl_Button(5, 31, 30, 16, "@||");
  btnPlayPause->box(FL_FLAT_BOX);
  btnPlayPause->color(FL_FOREGROUND_COLOR);
  btnPlayPause->selection_color((Fl_Color)4);
  btnPlayPause->labelsize(10);
  btnPlayPause->labelcolor((Fl_Color)93);
  btnPlayPause->callback((Fl_Callback*)onCmdAction, (void*)(PLAYPAUSE));
  o->clear_visible_focus();
} // Fl_Button* btnPlayPause
{ Fl_Button* o = btnFoward = new Fl_Button(35, 31, 30, 16, "@>>");
  btnFoward->box(FL_FLAT_BOX);
  btnFoward->color(FL_FOREGROUND_COLOR);
  btnFoward->selection_color((Fl_Color)4);
  btnFoward->labelsize(10);
  btnFoward->labelcolor((Fl_Color)93);
  btnFoward->callback((Fl_Callback*)onCmdAction, (void*)(FOWARD));
  o->clear_visible_focus();
} // Fl_Button* btnFoward
{ Fl_Button* o = btnBackward = new Fl_Button(65, 31, 30, 16, "@<<");
  btnBackward->box(FL_FLAT_BOX);
  btnBackward->color(FL_FOREGROUND_COLOR);
  btnBackward->selection_color((Fl_Color)4);
  btnBackward->labelsize(10);
  btnBackward->labelcolor((Fl_Color)93);
  btnBackward->callback((Fl_Callback*)onCmdAction, (void*)(BACKWARD));
  o->clear_visible_focus();
} // Fl_Button* btnBackward
{ Fl_Button* o = btnQuit = new Fl_Button(95, 31, 30, 16, "Quit");
  btnQuit->box(FL_FLAT_BOX);
  btnQuit->shortcut(0x40071);
  btnQuit->color(FL_FOREGROUND_COLOR);
  btnQuit->selection_color((Fl_Color)4);
 // btnQuit->labelfont(1);
  btnQuit->labelsize(9);
  btnQuit->labelcolor((Fl_Color)93);
  btnQuit->callback((Fl_Callback*)onCmdAction, (void*)(QUIT));
  o->clear_visible_focus();
} // Fl_Button* btnQuit
{ lbFiles = new Fl_Box(75, 11, 55, 19, "xxxxxxxx");
  lbFiles->box(FL_FLAT_BOX);
  lbFiles->color(FL_FOREGROUND_COLOR);
  lbFiles->labelfont(1);
  lbFiles->labelsize(9);
  lbFiles->labelcolor(FL_BACKGROUND_COLOR);
  lbFiles->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
} // Fl_Box* lbFiles
{ lbStatus = new Fl_Box(0, 11, 56, 17, "Reading...");
  lbStatus->box(FL_FLAT_BOX);
  lbStatus->color(FL_FOREGROUND_COLOR);
  lbStatus->labelsize(9);
  lbStatus->labelcolor(FL_BACKGROUND_COLOR);
  lbStatus->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
} // Fl_Box* lbStatus
{ Fl_Slider* o = progressBar = new Fl_Slider(0, 0, 130, 10);
  progressBar->type(3);
  progressBar->box(FL_BORDER_BOX);
  progressBar->color(FL_FOREGROUND_COLOR);
  progressBar->selection_color((Fl_Color)218);
  progressBar->callback((Fl_Callback*)onCmdSlider);
  progressBar->when(FL_WHEN_RELEASE);
  o->minimum(0);
  o->clear_visible_focus();
} // Fl_Slider* progressBar
set_override();
end();
}
